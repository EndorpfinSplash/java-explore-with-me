drop table if exists LOCATION;
drop table if exists COMPILATION_EVENT;
drop table if exists COMPILATION;
drop table if exists REQUEST;
drop table if exists EVENT;
drop table if exists EVENT_CATEGORY;
drop table if exists USERS;


CREATE TABLE IF NOT EXISTS USERS
(
    id    BIGINT GENERATED BY DEFAULT AS IDENTITY NOT NULL primary key,
    name  VARCHAR(255)                            NOT NULL,
    email VARCHAR(254)                            NOT NULL,
    CONSTRAINT UQ_USER_EMAIL UNIQUE (email)
);

CREATE TABLE IF NOT EXISTS EVENT_CATEGORY
(
    id   BIGINT GENERATED BY DEFAULT AS IDENTITY NOT NULL primary key,
    name VARCHAR(1000)                           NOT NULL unique
);

CREATE TABLE IF NOT EXISTS EVENT
(
    id                 BIGINT GENERATED BY DEFAULT AS IDENTITY NOT NULL primary key,
    user_id            bigint references USERS (id),
    annotation         VARCHAR(2000),
    category_id        BIGINT references EVENT_CATEGORY (ID)   not null,
    description        VARCHAR(7000),
    event_date         TIMESTAMP WITHOUT TIME ZONE,
    location_lat       real,
    location_lon       real,
    paid               boolean,
    participant_limit  int,
    published_on       Timestamp without time zone,
    request_moderation boolean,
    title              VARCHAR(1000),
    created_on         TIMESTAMP WITHOUT TIME ZONE,
    status             varchar(100)
);

CREATE TABLE IF NOT EXISTS REQUEST
(
    id           BIGINT GENERATED BY DEFAULT AS IDENTITY NOT NULL primary key,
    requester_id bigint references USERS (id),
    event_id     bigint references EVENT (id),
    created_on   TIMESTAMP WITHOUT TIME ZONE,
    status       varchar(100)
);


CREATE TABLE IF NOT EXISTS COMPILATION
(
    id     BIGINT GENERATED BY DEFAULT AS IDENTITY NOT NULL primary key,
    pinned boolean,
    title  VARCHAR(50)                             not null
);

CREATE TABLE IF NOT EXISTS COMPILATION_EVENT
(
    compilation_id bigint references COMPILATION (id) on delete cascade,
    event_id       bigint references EVENT (id) on delete cascade
);

CREATE TABLE IF NOT EXISTS LOCATION
(
    id           BIGINT GENERATED BY DEFAULT AS IDENTITY NOT NULL primary key,
    name         VARCHAR(200) unique,
    description  VARCHAR(1000),
    location_lat real,
    location_lon real,
    radius       real,
    created_on   TIMESTAMP WITHOUT TIME ZONE
);


CREATE OR REPLACE FUNCTION distance(lat1 float, lon1 float, lat2 float, lon2 float)
    RETURNS float
AS
'
declare
    dist float = 0;
    rad_lat1 float;
    rad_lat2 float;
    theta float;
    rad_theta float;
BEGIN
    IF lat1 = lat2 AND lon1 = lon2
    THEN
        RETURN dist;
    ELSE
        -- переводим градусы широты в радианы
        rad_lat1 = pi() * lat1 / 180;
        -- переводим градусы долготы в радианы
        rad_lat2 = pi() * lat2 / 180;
        -- находим разность долгот
        theta = lon1 - lon2;
        -- переводим градусы в радианы
        rad_theta = pi() * theta / 180;
        -- находим длину ортодромии
        dist = sin(rad_lat1) * sin(rad_lat2) + cos(rad_lat1) * cos(rad_lat2) * cos(rad_theta);

        IF dist > 1
            THEN dist = 1;
        END IF;

        dist = acos(dist);
        -- переводим радианы в градусы
        dist = dist * 180 / pi();
        -- переводим градусы в километры
        dist = dist * 60 * 1.8524;

        RETURN dist;
    END IF;
END;
'
LANGUAGE PLPGSQL;